# coding: utf-8

"""
    Amun API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InspectionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inspection_id': 'str',
        'parameters': 'object',
        'build_created': 'bool',
        'job_created': 'bool'
    }

    attribute_map = {
        'inspection_id': 'inspection_id',
        'parameters': 'parameters',
        'build_created': 'build_created',
        'job_created': 'job_created'
    }

    def __init__(self, inspection_id=None, parameters=None, build_created=None, job_created=None):  # noqa: E501
        """InspectionResponse - a model defined in Swagger"""  # noqa: E501
        self._inspection_id = None
        self._parameters = None
        self._build_created = None
        self._job_created = None
        self.discriminator = None
        self.inspection_id = inspection_id
        self.parameters = parameters
        self.build_created = build_created
        self.job_created = job_created

    @property
    def inspection_id(self):
        """Gets the inspection_id of this InspectionResponse.  # noqa: E501

        An id of submitted inspection for checking its status and its results.   # noqa: E501

        :return: The inspection_id of this InspectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._inspection_id

    @inspection_id.setter
    def inspection_id(self, inspection_id):
        """Sets the inspection_id of this InspectionResponse.

        An id of submitted inspection for checking its status and its results.   # noqa: E501

        :param inspection_id: The inspection_id of this InspectionResponse.  # noqa: E501
        :type: str
        """
        if inspection_id is None:
            raise ValueError("Invalid value for `inspection_id`, must not be `None`")  # noqa: E501

        self._inspection_id = inspection_id

    @property
    def parameters(self):
        """Gets the parameters of this InspectionResponse.  # noqa: E501

        Parameters echoed back to user (with default parameters if omitted).   # noqa: E501

        :return: The parameters of this InspectionResponse.  # noqa: E501
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this InspectionResponse.

        Parameters echoed back to user (with default parameters if omitted).   # noqa: E501

        :param parameters: The parameters of this InspectionResponse.  # noqa: E501
        :type: object
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters

    @property
    def build_created(self):
        """Gets the build_created of this InspectionResponse.  # noqa: E501

        True if the build was scheduled for the given.  # noqa: E501

        :return: The build_created of this InspectionResponse.  # noqa: E501
        :rtype: bool
        """
        return self._build_created

    @build_created.setter
    def build_created(self, build_created):
        """Sets the build_created of this InspectionResponse.

        True if the build was scheduled for the given.  # noqa: E501

        :param build_created: The build_created of this InspectionResponse.  # noqa: E501
        :type: bool
        """
        if build_created is None:
            raise ValueError("Invalid value for `build_created`, must not be `None`")  # noqa: E501

        self._build_created = build_created

    @property
    def job_created(self):
        """Gets the job_created of this InspectionResponse.  # noqa: E501

        True if there was created a job executing script for the given inspection.   # noqa: E501

        :return: The job_created of this InspectionResponse.  # noqa: E501
        :rtype: bool
        """
        return self._job_created

    @job_created.setter
    def job_created(self, job_created):
        """Sets the job_created of this InspectionResponse.

        True if there was created a job executing script for the given inspection.   # noqa: E501

        :param job_created: The job_created of this InspectionResponse.  # noqa: E501
        :type: bool
        """
        if job_created is None:
            raise ValueError("Invalid value for `job_created`, must not be `None`")  # noqa: E501

        self._job_created = job_created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InspectionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InspectionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
